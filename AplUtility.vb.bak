Imports log4net
Public Class AplUtility

    ''' プロパティ
    Protected _logger As ILog

    Public Region As String                 ' リジョン
    Public Zone As String                   ' ゾーン
    Public ClubCode As String               ' クラブコード
    Public MemberCode As String             ' 会員番号
    Public PeriodStart As String            ' 期開始（年度開始日月）
    Public PeriodEnd As String              ' 期終了（年度終了日月）
    Public LastUpdDate As String            ' 最終更新日時

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' コンストラクタ
    ''' </summary>
    Sub New(ByRef logger As ILog)
        _logger = logger
    End Sub

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' SQLite情報(A_ACCOUNT)から情報を取得する
    ''' </summary>
    ''' <param name="arrSQLite">SQLite情報(A_ACCOUNT)</param>
    Sub SetAccountInfoSQLite(ByRef arrSQLite As ArrayList)

        _logger.Info(" ▽ Start SetAccountInfo ▽")
        Try
            For Each dicWrk As Dictionary(Of String, String) In arrSQLite
                Region = dicWrk("Region")
                _logger.Debug("  Read : " & Region)
                Zone = dicWrk("Zone")
                _logger.Debug("   Zone : " & Zone)
                ClubCode = dicWrk("ClubCode")
                _logger.Debug("   ClubCode : " & ClubCode)
                MemberCode = dicWrk("MemberCode")
                _logger.Debug("   MemberCode : " & MemberCode)
                LastUpdDate = dicWrk("LastUpdDate")
                _logger.Debug("   LastUpdateDate : " & LastUpdDate)
            Next

        Catch ex As Exception
            _logger.Error(" ●SetAccountInfoSQLite 例外エラー:", ex)
            Throw

        End Try
        _logger.Info(" △ End SetAccountInfo △")

    End Sub

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' SQLite情報(A_SETTING)から年度情報を設定する
    ''' </summary>
    ''' <param name="arrSQLite">SQLite情報(A_SETTING)</param>
    Sub SetFiscalInfoSQLite(ByRef arrSQLite As ArrayList)

        For Each dicWrk As Dictionary(Of String, String) In arrSQLite
            PeriodStart = dicWrk("PeriodStart")
            PeriodEnd = dicWrk("PeriodEnd")
        Next

    End Sub

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' SQLServer情報(A_SETTING)から年度情報を設定する
    ''' </summary>
    ''' <param name="arrSQLsvr">SQLServer情報(A_SETTING)</param>
    Sub SetFiscalInfoSQLsvr(ByRef arrSQLsvr As ArrayList)

        For Each dicWrk As Dictionary(Of String, String) In arrSQLsvr
            PeriodStart = dicWrk("PeriodStart")
            PeriodEnd = dicWrk("PeriodEnd")
        Next

    End Sub


    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' 入力年月日の年度を取得する
    ''' </summary>
    ''' <param name="InYmd">年度を取得する年月日</param>
    ''' <returns>入力年月日の年度</returns>
    Function GetFiscalYear(InYmd As String) As String
        Dim ReFiscalYear As String
        Dim InY As String
        Dim InMd As String

        ' 指定年月日の年を取得
        InY = InYmd.Substring(0, 4)
        ' 指定年月日の月日を取得
        InMd = InYmd.Substring(5, 5)

        ' 指定年月日の年度チェック
        ' 戻り値に入力年を設定する。
        ReFiscalYear = InY
        ' 年度開始月日より入力月日が前の場合
        If InMd < PeriodStart Then
            ' 戻り値に昨年を設定する
            Dim lastYear As Integer = Integer.Parse(InY) - 1
            ReFiscalYear = lastYear.ToString
        End If

        Return ReFiscalYear

    End Function

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' 指定年度の年度開始年月日を取得する。
    ''' </summary>
    ''' <param name="InY">年度</param>
    ''' <returns></returns>
    Function GetFiscalStartYmdFromY(InY As String) As String
        Dim ReFiscalStartYmd As String = InY & PeriodStart

        Return ReFiscalStartYmd

    End Function

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' 指定年度の年度終了年月日を取得する。
    ''' </summary>
    ''' <param name="InY">年度</param>
    ''' <returns></returns>
    Function GetFiscalEndYmdFromY(InY As String) As String
        Dim ReFiscalEndYmd As String = InY & PeriodEnd

        Return ReFiscalEndYmd

    End Function

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''' <summary>
    ''' 指定フォルダに指定ファイルと同名のファイルがあるか確認する
    ''' 同名のファイルがある場合、ファイル名の後ろに数値を追加して返す
    ''' </summary>
    ''' <param name="filepath"></param>
    ''' <param name="filename"></param>
    ''' <returns></returns>
    Function ChkFileName(filepath As String, filename As String) As String
        ' 戻り値(入力ファイル名を設定)
        Dim RetFileName = filename
        ' ファイルパス＋ファイル名
        Dim FilePN = filepath & filename

        If System.IO.File.Exists(FilePN) Then
            ' 同じファイル名がある場合

            ' ファイル名（拡張子なし）
            Dim FileNameNex = System.IO.Path.GetFileNameWithoutExtension(filename)
            ' ファイル拡張子
            Dim FileNameEx = System.IO.Path.GetExtension(filename)
            ' ファイルパス＋ファイル名（拡張子なし）
            Dim FilePNNex = filepath & FileNameNex

            ' カウント用ファイル名取得
            Dim files As String() = System.IO.Directory.GetFiles(FilePNNex, "*", System.IO.SearchOption.AllDirectories)
            ' 番号をつけたファイル名を返す
            RetFileName = filepath & FileNameNex & files.Length & FileNameEx

        End If

        Return RetFileName

    End Function



End Class
